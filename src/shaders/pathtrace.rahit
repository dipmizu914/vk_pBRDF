/* Copyright (c) 2014-2018, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require          // This is about ray tracing
#extension GL_EXT_nonuniform_qualifier : enable  // To access unsized descriptor arrays
// Align structure layout to scalar
#extension GL_EXT_scalar_block_layout : enable

#define USE_ACCEL
#define USE_RANDOM
#define USE_SAMPLING
#define USE_SHADING
#define USE_SCENE
#define USE_SUN_AND_SKY
#include "headers/layouts.glsl"

#include "headers/raycommon.glsl"

#include "headers/random.glsl"
#include "headers/shade_state.glsl"

hitAttributeEXT vec2 bary;

// Payloads
layout(location = 0) rayPayloadInEXT HitPayload prd;



void main()
{
  // Retrieve the Primitive mesh buffer information
  RtPrimitiveLookup pinfo = primInfo[gl_InstanceCustomIndexEXT];

  // Getting the 'first index' for this mesh (offset of the mesh + offset of the triangle)
  const uint indexOffset  = pinfo.indexOffset + (3 * gl_PrimitiveID);
  const uint vertexOffset = pinfo.vertexOffset;           // Vertex offset as defined in glTF
  const uint matIndex     = max(0, pinfo.materialIndex);  // material of primitive mesh

  // Getting the 3 indices of the triangle (local)
  ivec3 triangleIndex = ivec3(indices[nonuniformEXT(indexOffset + 0)],  //
                              indices[nonuniformEXT(indexOffset + 1)],  //
                              indices[nonuniformEXT(indexOffset + 2)]);
  triangleIndex += ivec3(vertexOffset);  // (global)


  const vec3 pos0 = getVertex(triangleIndex.x);
  const vec3 pos1 = getVertex(triangleIndex.y);
  const vec3 pos2 = getVertex(triangleIndex.z);
  // compute geometry normal and check for back face hit
  const vec3 geom_normal  = normalize(cross(pos1 - pos0, pos2 - pos0));
  bool       is_back_face = dot(geom_normal, gl_ObjectRayDirectionEXT) > 0.0f;

  GltfShadeMaterial mat = materials[nonuniformEXT(matIndex)];


  // back face culling
  if(mat.doubleSided == 0 && is_back_face)
  {
    ignoreIntersectionEXT;  // Terminating (jump statement)
  }


  // early out if there is no opacity function
  if(mat.alphaMode == ALPHA_OPAQUE)
  {
    return;
  }

  // Get the texture coordinate
  const vec3 barycentrics = vec3(1.0 - bary.x - bary.y, bary.x, bary.y);
  const vec2 uv0          = getTexCoord(triangleIndex.x);
  const vec2 uv1          = getTexCoord(triangleIndex.y);
  const vec2 uv2          = getTexCoord(triangleIndex.z);
  vec2       texcoord0    = uv0 * barycentrics.x + uv1 * barycentrics.y + uv2 * barycentrics.z;

  // Uv Transform
  texcoord0 = (vec4(texcoord0.xy, 1, 1) * mat.uvTransform).xy;


  float baseColorAlpha = mat.pbrBaseColorFactor.a;
  if(mat.pbrBaseColorTexture > -1)
  {
    baseColorAlpha *= texture(texturesMap[nonuniformEXT(mat.pbrBaseColorTexture)], texcoord0).a;
  }

  float opacity;
  if(mat.alphaMode == ALPHA_MASK)
  {
    opacity = baseColorAlpha > mat.alphaCutoff ? 1.0 : 0.0;
  }
  else
  {
    opacity = baseColorAlpha;
  }

  // do alpha blending the stochastically way
  if(rnd(prd.seed) > opacity)
    ignoreIntersectionEXT;
}
